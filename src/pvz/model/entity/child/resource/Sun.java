package pvz.model.entity.child.resource;

import pvz.model.WorldConstants;
import pvz.utility.Vector;

/**
 * This is the most common resource in the game. It is commonly spawned by
 * Sunflowers, but may also fall from the sky.
 */
public class Sun extends ResourceEntity {

    private static final double SUN_DIM = WorldConstants.CELL_WIDTH;
    private static final int SUN_ENERGY = 25;

    private final boolean fallenFromSky;
    private double maxTravel;
    private double distanceTravelled;
    private boolean finishedTrajectory;
    private final double gravity;
    private final double velocityX;
    private final double velocityY;
    private double landX;
    private long ticks;
    private double startingHeight;

    /**
     * Sun constructor.
     * 
     * @param position
     *            starting position
     * @param fallenFromSky
     *            if the sun has been randomly generated by the world
     */
    public Sun(final Vector position, final boolean fallenFromSky) {
        super(position, SUN_DIM, SUN_DIM, SUN_ENERGY);
        this.fallenFromSky = fallenFromSky;
        this.distanceTravelled = 0d;
        this.finishedTrajectory = false;
        this.maxTravel = WorldConstants.BACKYARD_HEIGHT * Math.random();
        this.gravity = WorldConstants.GRAVITY;
        this.velocityX = WorldConstants.SUN_SPAWN_SPEED_X;
        this.velocityY = WorldConstants.SUN_SPAWN_SPEED_Y;

        this.startingHeight = position.getY();
        this.ticks = 0;
        if (!fallenFromSky) {
            this.landX = 2 * (Math.random() - .5d);
        }
        if (this.maxTravel == 0) {
            this.maxTravel += WorldConstants.CELL_WIDTH;
        } else if (this.maxTravel == WorldConstants.BACKYARD_HEIGHT) {
            this.maxTravel -= WorldConstants.CELL_WIDTH;
        }
    }

    @Override
    public void update() {
        if (this.fallenFromSky && this.distanceTravelled < this.maxTravel) {
            this.rise(WorldConstants.SUN_FALLING_SPEED);
            this.distanceTravelled += WorldConstants.SUN_FALLING_SPEED;
        } else if (!this.fallenFromSky && !finishedTrajectory) {
            this.ticks++;
            this.move(-velocityX * this.landX);
            this.rise(-(this.velocityY - this.ticks * this.gravity));
            if (this.getY() >= this.startingHeight) {
                this.finishedTrajectory = true;
            }
        }
    }

}